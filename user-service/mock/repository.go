// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/interface.go
//
// Generated by this command:
//
//	mockgen -source=./repository/interface.go IUserStorage
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/Lab-ICN/backend/user-service/repository"
	types "github.com/Lab-ICN/backend/user-service/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserStorage is a mock of IUserStorage interface.
type MockIUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIUserStorageMockRecorder
}

// MockIUserStorageMockRecorder is the mock recorder for MockIUserStorage.
type MockIUserStorageMockRecorder struct {
	mock *MockIUserStorage
}

// NewMockIUserStorage creates a new mock instance.
func NewMockIUserStorage(ctrl *gomock.Controller) *MockIUserStorage {
	mock := &MockIUserStorage{ctrl: ctrl}
	mock.recorder = &MockIUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserStorage) EXPECT() *MockIUserStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserStorage) Create(ctx context.Context, user *types.CreateUserParams) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserStorageMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserStorage)(nil).Create), ctx, user)
}

// CreateBulk mocks base method.
func (m *MockIUserStorage) CreateBulk(ctx context.Context, users []types.CreateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulk", ctx, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulk indicates an expected call of CreateBulk.
func (mr *MockIUserStorageMockRecorder) CreateBulk(ctx, users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulk", reflect.TypeOf((*MockIUserStorage)(nil).CreateBulk), ctx, users)
}

// Delete mocks base method.
func (m *MockIUserStorage) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserStorageMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserStorage)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockIUserStorage) Get(ctx context.Context, id uint64) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUserStorageMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserStorage)(nil).Get), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockIUserStorage) GetByEmail(ctx context.Context, email string) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockIUserStorageMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockIUserStorage)(nil).GetByEmail), ctx, email)
}

// List mocks base method.
func (m *MockIUserStorage) List(ctx context.Context) ([]repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIUserStorageMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIUserStorage)(nil).List), ctx)
}

// ListPassed mocks base method.
func (m *MockIUserStorage) ListPassed(ctx context.Context, year uint) ([]repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPassed", ctx, year)
	ret0, _ := ret[0].([]repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPassed indicates an expected call of ListPassed.
func (mr *MockIUserStorageMockRecorder) ListPassed(ctx, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPassed", reflect.TypeOf((*MockIUserStorage)(nil).ListPassed), ctx, year)
}
