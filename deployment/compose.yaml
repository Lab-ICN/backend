name: lab-icn-web

volumes:
  postgresql-data:
  grafana-data:

networks:
  external:
  internal:

services:
  nginx:
    image: nginx:1.27-alpine3.20
    restart: unless-stopped
    ports:
      - 3000:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - external

  frontend:
    build:
      context: ../frontend
    restart: unless-stopped
    networks:
      - external

  postgresql:
    image: postgres:17.2-alpine3.20
    restart: unless-stopped
    env_file: .env
    environment:
      postgresql_USER: ${POSTGRES_USER:?error}
      postgresql_PASSWORD: ${POSTGRES_PASSWORD:?error}
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    networks:
      - internal

  fluentbit:
    image: fluent/fluent-bit:3.2.2
    restart: unless-stopped
    command:
      - "--config=/mnt/config/fluentbit.yaml"
    volumes:
      - /var/lib/docker/containers:/var/log/containers:ro
      - ./fluentbit.yaml:/mnt/config/fluentbit.yaml:ro
      - ./filter.lua:/mnt/script/filter.lua
    networks:
      - internal

  loki:
    image: grafana/loki:3.3.1
    restart: unless-stopped
    command:
      - "-config.file=/mnt/config/loki.yaml"
    volumes:
      - ./loki.yaml:/mnt/config/loki.yaml:ro
    networks:
      - internal

  grafana:
    image: grafana/grafana-oss:11.4.0
    restart: unless-stopped
    env_file: .env
    environment:
      - GF_SERVER_ROOT_URL=http://localhost/grafana
      - GF_SERVER_HTTP_PORT=${GF_SERVER_HTTP_PORT:?error}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:?error}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:?error}
    ports:
      - ${GF_SERVER_HTTP_PORT}:${GF_SERVER_HTTP_PORT}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - internal
      - external

  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      CONFIG_FILE: /run/.secret.json
    logging:
      driver: json-file
    volumes:
      - ../user-service/secret.json:/run/.secret.json
    networks:
      - internal
      - external
    depends_on:
      - postgresql

  token-service:
    build:
      context: ../token-service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      CONFIG_FILE: /run/.secret.json
    logging:
      driver: json-file
    volumes:
      - ../token-service/secret.json:/run/.secret.json
    networks:
      - internal
      - external
    depends_on:
      - postgresql
